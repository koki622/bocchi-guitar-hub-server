x-kong-config:
  &kong-env
  KONG_DATABASE: postgres
  KONG_PG_DATABASE: kong
  KONG_PG_HOST: kong-db
  KONG_PG_PASSWORD: kongpass
  KONG_PG_USER: kong

networks:
  webapi-net:
    driver: bridge

volumes:
  consumer_data:
  kong_data:
  redis_data:

services:
  kong-migrations:
    image: kong:3.7.1-ubuntu
    platform: linux/arm64
    command: kong migrations bootstrap
    depends_on:
      - kong-db
    environment:
      <<: *kong-env
    networks:
      - webapi-net
    restart: on-failure

  kong-migrations-up:
    image: kong:3.7.1-ubuntu
    platform: linux/arm64
    command: kong migrations up && kong migrations finish
    depends_on: 
      - kong-db  
    environment:
      <<: *kong-env
    networks:
      - webapi-net
    restart: on-failure

  kong:
    image: kong:3.7.1-ubuntu
    depends_on:
      kong-db:
        condition: service_healthy
    platform: linux/arm64
    environment:
      <<: *kong-env
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_LISTEN: 0.0.0.0:8002
    networks:
      - webapi-net
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8002:8002"
      - "8005:8005"
      - "8006:8006"
      - "8443:8443"
      - "8444:8444"
      - "8445:8445"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure:5
  
  kong-deck:
    image: kong/deck
    platform: linux/arm64
    environment:
      DECK_KONG_ADDR: http://kong:8001
    entrypoint: >
      sh -c "sh /scripts/kong-init.sh && while true; do sleep 1000; done"
    depends_on:
      kong:
        condition: service_healthy
    volumes:
      - ./kong/kong.yaml:/home/deckuser/kong.yaml
      - ./kong/kong-init.sh:/scripts/kong-init.sh
    restart: on-failure
    networks:
      - webapi-net

  kong-db:
    image: postgres:16.1-alpine
    platform: linux/arm64
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kongpass
    volumes:
      - kong_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-d",
          "${KONG_PG_DATABASE:-kong}",
          "-U",
          "${KONG_PG_USER:-kong}"
        ]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true
    networks:
      - webapi-net
  redis:
      image: redis:7.2.5-alpine
      platform: linux/arm64
      ports:
        - "${REDIS_PORT}:6379"
      environment:
        - REDIS_PORT=${REDIS_PORT}
      volumes:
        - redis_data:/data
      networks:
        - webapi-net
        
  utility-webapi:
    build:
      context: ./microservices/utility-webapi
      dockerfile: Dockerfile
    environment:
      - CONSUMER_VOLUME_PATH=${CONSUMER_VOLUME_PATH}
      - DEMUCS_JOB_TIMEOUT=1200
      - CREMA_JOB_TIMEOUT=60
      - WHISPER_JOB_TIMEOUT=1200
      - ALLIN1_SPECTROGRAMS_JOB_TIMEOUT=100
      - ALLIN1_STRUCTURE_JOB_TIMEOUT=1200
    volumes:
      - ./microservices/utility-webapi/:/app
      - consumer_data:${CONSUMER_VOLUME_PATH}
    networks:
      - webapi-net
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  faster-whisper-webapi:
    build:
      context: ./microservices/faster-whisper-webapi
      dockerfile: Dockerfile.cpu
    environment:
      - CONSUMER_VOLUME_PATH=${CONSUMER_VOLUME_PATH}
      - GPU_MODE=False
    volumes:
      - ./microservices/faster-whisper-webapi/src:/app/src
      - consumer_data:${CONSUMER_VOLUME_PATH}
    networks:
      - webapi-net
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload

  demucs-webapi:
    build: 
      context: ./microservices/demucs-webapi
      dockerfile: Dockerfile.cpu
    environment:
      - CONSUMER_VOLUME_PATH=${CONSUMER_VOLUME_PATH}
    volumes:
      - ./microservices/demucs-webapi/src:/app/src
      - consumer_data:${CONSUMER_VOLUME_PATH}
    networks:
      - webapi-net
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload

  allin1-webapi:
    build:
      context: ./microservices/allin1-webapi
      args:
        MACHINE_PLATFORM:  "aarch64"
      dockerfile: Dockerfile.cpu
    environment:
      - CONSUMER_VOLUME_PATH=${CONSUMER_VOLUME_PATH}
    volumes:
      - ./microservices/allin1-webapi/src:/app/src
      - consumer_data:${CONSUMER_VOLUME_PATH}
    networks:
      - webapi-net
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload

  crema-webapi:
    build:
      context: ./microservices/crema-webapi
      dockerfile: Dockerfile
    environment:
      - CONSUMER_VOLUME_PATH=${CONSUMER_VOLUME_PATH}
      - LD_PRELOAD=/usr/local/lib/python3.9/site-packages/sklearn/utils/../../scikit_learn.libs/libgomp-d22c30c5.so.1.0.0
    volumes:
      - ./microservices/crema-webapi/:/app
      - consumer_data:${CONSUMER_VOLUME_PATH}
    networks:
      - webapi-net
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload