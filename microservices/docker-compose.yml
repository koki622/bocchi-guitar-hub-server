networks:
  microservice-net:
    driver: bridge
services:
  redis:
    image: redis:7.2.5
    ports:
      - "${REDIS_PORT}:6379"
    environment:
      - REDIS_PORT=${REDIS_PORT}
    volumes:
      - redis_data:${REDIS_VOLUME_PATH}
    networks:
      - microservice-net
      
  utility-webapi:
    build:
      context: ./utility-webapi
      dockerfile: Dockerfile
    ports:
      - ${UTILITY_WEBAPI_PORT}:8000
    environment:
      - CONSUMER_VOLUME_PATH=${CONSUMER_VOLUME_PATH}
    volumes:
      - ./utility-webapi/:/app
      - consumer_data:${CONSUMER_VOLUME_PATH}
    networks:
      - microservice-net
    command: /bin/sh -c "while sleep 1000; do :; done"

  faster-whisper-webapi:
    build:
      context: ./faster-whisper-webapi
      dockerfile: Dockerfile
    ports:
      - ${FASTER_WHISPER_WEBAPI_PORT}:8000
    environment:
      - CONSUMER_VOLUME_PATH=${CONSUMER_VOLUME_PATH}
    volumes:
      - ./faster-whisper-webapi/:/app
      - consumer_data:${CONSUMER_VOLUME_PATH}
    networks:
      - microservice-net
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [gpu]
    command: /bin/sh -c "while sleep 1000; do :; done"

  demucs-webapi:
    build: 
      context: ./demucs-webapi
      dockerfile: Dockerfile
    ports:
      - ${DEMUCS_WEBAPI_PORT}:8000
    environment:
      - CONSUMER_VOLUME_PATH=${CONSUMER_VOLUME_PATH}
    volumes:
      - ./demucs-webapi/:/app
      - consumer_data:${CONSUMER_VOLUME_PATH}
    networks:
      - microservice-net
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [gpu]
    command: /bin/sh -c "while sleep 1000; do :; done"
  

  allin1-webapi:
    build:
      context: ./allin1-webapi
      dockerfile: Dockerfile
    ports:
      - ${ALLIN1_WEBAPI_PORT}:8000
    environment:
      - CONSUMER_VOLUME_PATH=${CONSUMER_VOLUME_PATH}
    volumes:
      - ./allin1-webapi/:/app
      - consumer_data:${CONSUMER_VOLUME_PATH}
    networks:
      - microservice-net
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [gpu]
    command: /bin/sh -c "while sleep 1000; do :; done"



  crema-webapi:
    build:
      context: ./crema-webapi
      dockerfile: Dockerfile
    ports:
      - ${CREMA_WEBAPI_PORT}:8000
    environment:
      - CONSUMER_VOLUME_PATH=${CONSUMER_VOLUME_PATH}
    volumes:
      - ./crema-webapi/:/app
      - consumer_data:${CONSUMER_VOLUME_PATH}
    networks:
      - microservice-net
    command: /bin/sh -c "while sleep 1000; do :; done"

volumes:
  consumer_data:
  redis_data:
  

